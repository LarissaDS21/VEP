#Created in Snakemake
#Pipeline to Running VEP with Splice and 5'UTR plugins, filtering the variants accordingly to their cut-off score specific of each tool,
#and at last build a table with these variants selected by the filters

VCF = open('Raw_data_varseq/{lote}/CountVariants/VCFs_cheios.txt').read().strip().split('\n')

#os.envs  export PERL5LIB=$PERL5LIB:/mnt/data4/lgbm/Larissa.Souza/vep_program/plugins/UTRannotator

#CAMINHO="/home/larissadias/vep-program"
CAMINHO= "/mnt/data4/lgbm/Larissa.Souza/vep_program"


rule all:
    input:
        "{lote}/TableFromVCFs/all.samples.tab"

#Using Bcftools to select only annotated information of interest from INFO field, and then excluding any others. 
#Output needs to be a unzipped VCF to the next steps (specially to run filter_vep command)

rule bcftools_annotate:
    input:
        vcf_c="Raw_data_varseq/{lote}/{samples}_corrigido.vcf.gz",
        vcf_c_tbi="Raw_data_varseq/{lote}/{samples}_corrigido.vcf.gz.tbi",
    output:
        vcf_info_selected="{lote}/data/{samples}.vcf"
    log:
        "{lote}/logs/bcftools_annotate/{samples}.log"
    threads: 1
    resources:
        mem_gb=1
    params:
        jobname = "bcftools_annotate_{lote}_{samples}"
    shell:
        "/conda/bin/bcftools annotate -x ^INFO/GeneNames,INFO/SequenceOntologyCombined,INFO/TranscriptNameClinicallyRelevant,INFO/HGVScClinicallyRelevant,INFO/HGVSpClinicallyRelevant,"
        "INFO/ExonNumberClinicallyRelevant,INFO/LRGID,INFO/In26Genes,INFO/Classification,INFO/ClinicalSignificance,INFO/AggregateofInterpretationsfromSubmissions,INFO/ReviewStatus,"
        "INFO/AltAlleleFreqAF,INFO/POPMAXAltAlleleFreqAF,INFO/REVEL {input.vcf_c} -Ov -o {output}"

#Running VEP with plugins

rule vep:
    input:
        vcf_info_selected="{lote}/data/{samples}.vcf"
    output:
        vep_vcf="{lote}/vep_vfcs/{samples}_VEP.vcf"
    log:
        "{lote}/logs/vep/{samples}_VEP.log"
    threads: 1
    resources:
        mem_gb=1
    params:
        jobname = "vep_{lote}_{samples}"
    shell:
        "vep -i {input} -o {output} --hgvs --fasta Homo_sapiens.GRCh37.dna.primary_assembly.fa.gz --assembly GRCh37 --vcf --offline "
        "--cache --cache_version 105 --dir_cache {CAMINHO}/105_release --dir_plugins {CAMINHO}/plugins/ "
        "--plugin dbscSNV,{CAMINHO}/plugins/dbscSNV/dbscSNV1.1_GRCh37.txt.gz --plugin MaxEntScan,{CAMINHO}/plugins/MaxEntScan/fordownload "
        "--plugin SpliceAI,snv={CAMINHO}/plugins/SpliceAI/spliceai_scores.raw.snv.hg19.vcf.gz,indel={CAMINHO}/plugins/SpliceAI/spliceai_scores.raw.indel.hg19.vcf.gz "
        "--plugin UTRannotator,{CAMINHO}/plugins/UTRannotator/uORF_5UTR_GRCh37_PUBLIC.txt"

#Filtering variants' plugins scores 

rule filter_vep:
    input:
        vep_vcf="{lote}/vep_vfcs/{samples}_VEP.vcf"
    output:
        filter_vep="{lote}/filtered_vcfs/{samples}_filter.vcf"
    log:
        "{lote}/logs/filter_vep/{samples}_filter.log"
    threads: 1
    resources:
        mem_gb=1
    params:
        jobname = "filter_vep_{lote}_{samples}"
    shell:
        'filter_vep -i  {input} -o {output} --filter "(ada_score > 0.6 or rf_score > 0.6) or (MaxEntScan_diff >= 3.0) or '
        '(SpliceAI_pred_DS_AG >= 0.5 or SpliceAI_pred_DS_AL >= 0.5 or SpliceAI_pred_DS_DG >= 0.5 or SpliceAI_pred_DS_DL >= 0.5) or '
        '(five_prime_UTR_variant_consequence is uAUG_gained or five_prime_UTR_variant_consequence is uAUG_lost or five_prime_UTR_variant_consequence is uSTOP_ gained or five_prime_UTR_variant_consequence is uSTOP_lost or five_prime_UTR_variant_consequence is uFrameShift or five_prime_UTR_variant_consequence is uFrameshift) or '
        '(Consequence is 3_prime_UTR_variant)" '

rule bgzip:
    input:
        filter_vep="{lote}/filtered_vcfs/{samples}_filter.vcf"
    output:
        filter_vep_gz="{lote}/filtered_vcfs/bgzip_filtered_vcfs/{samples}_filter.vcf.gz"
    log:
        "{lote}/logs/bgzip_filtered_vcfs/{samples}_filter.log"
    threads: 1
    resources:
        mem_gb=1
    params:
        jobname = "bgzip_{lote}_{samples}"
    shell:
        "bgzip -c {input} > {output}"

rule tabix:
    input:
        filter_vep_gz="{lote}/filtered_vcfs/bgzip_filtered_vcfs/{samples}_filter.vcf.gz"
    output:
        filter_vep_gz_tbi="{lote}/filtered_vcfs/bgzip_filtered_vcfs/{samples}_filter.vcf.gz.tbi"
    log:
        "{lote}/logs/tabix/{samples}_filter.log"
    threads: 1
    resources:
        mem_gb=1
    params:
        jobname = "tabix_{lote}_{samples}"
    shell:
        "tabix -p vcf {input}"

#Converting from VCF format file to table with fields separated by tab from each VEP annotation using special tool "Bcftools_splitvep".
#Using Bcftools query in this step is not a option, because VCFs generated by VEP contain all the VEP annotations in the same column all together.

rule bcftools_splitvep:
    input:
        filter_vep_gz="{lote}/filtered_vcfs/bgzip_filtered_vcfs/{samples}_filter.vcf.gz",
        filter_vep_gz_tbi="{lote}/filtered_vcfs/bgzip_filtered_vcfs/{samples}_filter.vcf.gz.tbi",
    output:
        table="{lote}/TableFromVCFs/{samples}.tab"
    log:
        "{lote}/logs/bcftools_splitvep/{samples}.log"
    threads: 1
    resources:
        mem_gb=1
    params:
        jobname = "bcftools_splitvep_{lote}_{samples}"
    shell:
        "/conda/bin/bcftools +split-vep -f '%CHROM\t%POS\t%ID\t%REF\t%ALT\t%INFO/GeneNames\t%INFO/SequenceOntologyCombined\t%INFO/TranscriptNameClinicallyRelevant\t%INFO/HGVScClinicallyRelevant"
        "\t%INFO/HGVSpClinicallyRelevant\t%INFO/ExonNumberClinicallyRelevant\t%INFO/LRGID\t%INFO/In26Genes\t%INFO/Classification\t%INFO/ClinicalSignificance\t%INFO/AggregateofInterpretationsfromSubmissions"
        "\t%INFO/ReviewStatus\t%INFO/AltAlleleFreqAF\t%INFO/POPMAXAltAlleleFreqAF\t%INFO/REVEL\t%CSQ\t[\t%GT\t%VAF\t%GQ\t%DP\t%AD\t%GT2\t%Zygosity\t%SAMPLE]\n' -A tab {input.filter_vep_gz} > {output}"

#Joining all variants filtered 

rule bcftools_join:
    input:
        table=expand("{lote}/TableFromVCFs/{samples}.tab",samples=VCF)
    output:
        table="{lote}/TableFromVCFs/all.samples.tab"
    log:
        "{lote}/logs/bcftools_splitvep/join.log"
    threads: 1
    resources:
        mem_gb=1
    params:
        jobname = "bcftools_join_{lote}_tablevep"
    shell:
        "echo 'CHROM\tPOS\tID\tREF\tALT\tGeneNames\tSequenceOntologyCombined\tTranscriptNameClinicallyRelevant\tHGVScClinicallyRelevant\tHGVSpClinicallyRelevant\tExonNumberClinicallyRelevant"
        "\tLRGID\tIn26Genes\tClassification\tClinicalSignificance\tAggregateofInterpretationsfromSubmissions\tReviewStatus\tAltAlleleFreqAF\tPOPMAXAltAlleleFreqAF\tREVEL\tAllele\tConsequence"
        "\tIMPACT\tSYMBOL\tGene\tFeature_type\tFeature\tBIOTYPE\tExon\tIntron\tHGVSc\tHGVSp\tcDNA_position\tCDS_position\tProtein_position\tAmino_acids\tCodons\tExisting_variation\tDISTANCE"
        "\tSTRAND\tFLAGS\tSYMBOL_SOURCE\tHGNC_ID\tHGVS_OFFSET\tada_score\trf_scoret\tMaxEntScan_alt\tMaxEntScan_diff\tMaxEntScan_ref\tSpliceAI_pred_DP_AG\tSpliceAI_pred_DP_AL\tSpliceAI_pred_DP_DG"
        "\tSpliceAI_pred_DP_DL\tSpliceAI_pred_DS_AG\tSpliceAI_pred_DS_AL\tSpliceAI_pred_DS_DG\tSpliceAI_pred_DS_DL\tSpliceAI_pred_SYMBOL\texisting_InFrame_oORFs\texisting_OutOfFrame_oORFs\texisting_uORFs"
        "\tfive_prime_UTR_variant_annotation\tfive_prime_UTR_variant_consequence\t\tGT\tVAF\tGQ\tDP\tAD\tGT2\tZygosity\tSAMPLE' > {output}; "
        "cat {input.table} >> {output}"
